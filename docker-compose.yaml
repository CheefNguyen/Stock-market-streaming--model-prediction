version: '3'

volumes:
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}

services:

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=druid
      - POSTGRES_PASSWORD=druid
      - POSTGRES_DB=druid
    restart: unless-stopped
    ports:
      - 5432:5432

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    restart: unless-stopped
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  
  coordinator:
    image: apache/druid:28.0.1
    container_name: coordinator
    volumes:
      - druid_shared:/shared
      - coordinator_var:/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - ./druid/environment

  broker:
    image: apache/druid:28.0.1
    container_name: broker
    volumes:
      - broker_var:/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - ./druid/environment

  historical:
    image: apache/druid:28.0.1
    container_name: historical
    volumes:
      - druid_shared:/shared
      - historical_var:/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - ./druid/environment

  middlemanager:
    image: apache/druid:28.0.1
    container_name: middlemanager
    volumes:
      - druid_shared:/shared
      - middle_var:/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - ./druid/environment

  router:
    image: apache/druid:28.0.1
    container_name: router
    volumes:
      - router_var:/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - ./druid/environment

  webserver:
    image: apache/airflow:latest
    command: webserver
    entrypoint: ['/opt/airflow/script/entrypoint.sh']
    container_name: webserver
    depends_on:
      - kafka
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://druid:druid@postgres:5432/druid
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  scheduler:
    image: apache/airflow:latest
    depends_on:
      webserver:
        condition: service_healthy
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://druid:druid@postgres:5432/druid
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
    restart: unless-stopped
    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"

  superset:
    image: amancevice/superset:1.4.1
    container_name: superset
    restart: unless-stopped
    ports:
      - 8088:8088
    # command: bash -c "docker exec -it superset bash superset-init"

    